#!/usr/bin/env node

/**
 * Module dependencies.
 */
if(!process.env.FILE) {
  console.error('ENV file name must be required, default is .env');
  process.env.FILE = '.env'
}

require('dotenv').config({
  path: process.env.FILE
});
var app = require('../app');
var debug = require('debug')('region:server');
var http = require('http');
var redis = require("redis"),
  client = redis.createClient({
    host: process.env.REDIS_HOST
  });
var os = require('os');

const Redis = require('ioredis');
const publicIp = require('public-ip');
const pub = new Redis({
  host: process.env.REDIS_HOST
});
const channel = 'poc';

var ifaces = os.networkInterfaces();

let address = '';
// publicIp.v4().then(add => {
//   console.log("address", add);
//   address = add;
// })
Object.keys(ifaces).forEach(function (ifname) {
  var alias = 0;

  ifaces[ifname].forEach(function (iface) {
    if ('IPv4' !== iface.family || iface.internal !== false) {
      // skip over internal (i.e. 127.0.0.1) and non-ipv4 addresses
      return;
    }

    if (alias >= 1) {
      // this single interface has multiple ipv4 addresses
      console.log(ifname + ':' + alias, iface.address);
    } else {
      // this interface has only one ipv4 adress
      console.log(ifname, iface.address);
      if (ifname === 'enp2s0')
        address = iface.address
    }
    ++alias;
  });
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);






/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



io.on('connection', function (socket) {
  console.log("socket connected", socket.request._query);
  let obj = {};
  obj[socket.request._query.name] = socket.request._query.region;
  client.set(socket.request._query.region + "==" + socket.id + "==" + socket.request._query.name, socket.request._query.name,
    () => {
      pub.publish(channel, 'data');

    });

  socket.on('disconnect', function () {
    console.log("socket disconnected", socket.id);
    client.keys(`*==${socket.id}==*`, (err, data) => {
      console.log("disconnected client", data);
      client.DEL(data[0], (err, data) => {
        console.log("key is deleted", data);
        pub.publish(channel, 'data');

        // getConnectedUsers().then(data => {
        //   let array = [...data.india, ...data.austrelia, ...data.us];
        //   console.log(array.length);
        //   publish.publish('sub', array.length.toString());
        // })
        // client.keys('india-*', (err, keys) => {
        //   console.log("keys", keys, err);
        //   publish.publish('sub', keys.length.toString());
        //   // io.emit('admin', keys.length.toString());
        // })
      })
    });

  });

  // client.keys('india-*', (err, keys) => {
  //   console.log("keys", keys, err);
  //   publish.publish('sub', keys.length.toString());
  //   // io.emit('admin', keys.length.toString());
  // })

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  // publicIp.v4().then(add => {
    // console.log("address", add);
    // address = add;

    console.log(process.env.COUNTRY, 'server connected on', address + ':' + port);
    client.set(process.env.COUNTRY, address + ':' + port);
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  // })
}
